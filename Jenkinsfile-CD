pipeline {
    agent any

    environment {
        HELM_RELEASE = "petclinic"
        HELM_CHART_REPO = "https://github.com/minhthien278/project03_k8s_thien.git"
        GIT_REPO_CODE = "https://github.com/minhthien278/project03_thien.git"
        DOCKER_USER = "nguyenminhthien2708"
        KUBECONFIG = '/var/lib/jenkins/.kube/config'
    }

    stages {
        stage('Clone Helm Chart Repository') {
            steps {
                sh "rm -rf helm-chart"
                sh "git clone ${env.HELM_CHART_REPO} helm-chart"
            }
        }

        stage('Clone Application Source Code Repository') {
            steps {
                dir('source-code') {
                    deleteDir()
                    sh "git clone ${env.GIT_REPO_CODE} ."
                }
            }
        }

        stage('Generate values.yaml') {
            steps {
                script {
                    def apiGatewayTag = getTag("api-gateway", params.api_gateway)
                    echo "api-gateway tag: ${apiGatewayTag}"
                    def namespace = params.namespace.trim()
                    def values = """
global:
  namespace: ${namespace}

services:
  api-gateway:
    image:
      tag: "${getTag("api-gateway", params.api_gateway)}"
    ingress:
      host: petclinic-${namespace}.com

  config-server:
    image:
      tag: "${getTag("config-server", params.config_server)}"

  customers-service:
    image:
      tag: "${getTag("customers-service", params.customers_service)}"

  discovery-server:
    image:
      tag: "${getTag("discovery-server", params.discovery_server)}"

  vets-service:
    image:
      tag: "${getTag("vets-service", params.vets_service)}"

  visits-service:
    image:
      tag: "${getTag("visits-service", params.visits_service)}"
"""

                    writeFile file: "helm-chart/environments/dev-review/values-${namespace}.yaml", text: values
                    echo "Generated values-${namespace}.yaml"
                }
            }
        }
        stage('Deploy to Kubernetes') {
           
            when {
                expression { return params.namespace != null }
            }
            steps {
                script {
                    def namespace = params.namespace.trim()
                    sh """
                        cd helm-chart
                        helm upgrade --install ${env.HELM_RELEASE}-${namespace} . \
                        --namespace ${namespace} --create-namespace \
                        -f environments/dev-review/values-${namespace}.yaml || true
                    """
                }
            }
        }
        stage('Add Ip Ingress In Your File Host') {
            steps {
                script {
                    def namespace = params.namespace.trim()
                    def ip = ''

                    // Chờ cho đến khi IP được cấp phát
                    timeout(time: 2, unit: 'MINUTES') { // tránh chờ vô hạn
                        waitUntil {
                            ip = sh(
                                script: "kubectl get ingress -n ${namespace} -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}'",
                                returnStdout: true
                            ).trim()
                            return ip != ''
                        }
                    }

                    echo "Add this line to your /etc/hosts file: ${ip} petclinic-${namespace}.com"
                }
            }
        }
    }

}

def getTag(serviceName, branch) {
    if (branch == "main") return "latest"

    def commit = sh(
        script: "cd source-code && git fetch origin ${branch} && git rev-parse --short origin/${branch}",
        returnStdout: true
    ).trim()

    return commit
}
